<%= semantic_form_for [:admin, @communication_work_order] do |f| %>
  <%= f.semantic_errors %>

  <% reimbursement = f.object.reimbursement || (params[:reimbursement_id] ? Reimbursement.find_by(id: params[:reimbursement_id]) : nil) %>

  <div class="tabs">
    <div class="tab-content" id="tab-basic-info">
      <h3>基本信息</h3>
      <%= f.inputs '工单详情' do %>
        <% if reimbursement %>
          <%= render 'admin/reimbursements/reimbursement_display', reimbursement: reimbursement %>
          <%= f.input :reimbursement_id, as: :hidden, input_html: { value: reimbursement.id } %>
        <% elsif f.object.reimbursement %>
          <%= f.input :reimbursement_invoice_number, label: '报销单号', input_html: { value: f.object.reimbursement.invoice_number, readonly: true, disabled: true } %>
        <% end %>
        <%= f.input :status, input_html: { readonly: true, disabled: true }, label: '工单状态' if f.object.persisted? %>
      <% end %>

      <!-- 费用明细选择 -->
      <% if reimbursement %>
        <div class="panel">
          <h3>选择关联的费用明细</h3>
          <div class="fee-details-selection">
            <% reimbursement.fee_details.each do |fee_detail| %>
              <div class="fee-detail-item">
                <label for="fee_detail_<%= fee_detail.id %>">
                  <div class="checkbox-container">
                    <%= check_box_tag "communication_work_order[submitted_fee_detail_ids][]",
                                    fee_detail.id,
                                    f.object.submitted_fee_detail_ids&.include?(fee_detail.id.to_s),
                                    id: "fee_detail_#{fee_detail.id}",
                                    class: "fee-detail-checkbox",
                                    data: { fee_type: fee_detail.fee_type, fee_detail_id: fee_detail.id } %>
                  </div>
                  <span class="fee-detail-id">#<%= fee_detail.id %></span>
                  <span class="fee-detail-type"><%= fee_detail.fee_type %></span>
                  <span class="fee-detail-amount"><%= number_to_currency(fee_detail.amount, unit: "¥") %></span>
                  <span class="fee-detail-date"><%= fee_detail.fee_date %></span>
                  <span class="fee-detail-status">
                    <% arbre_context = Arbre::Context.new %>
                    <%= arbre_context.status_tag(fee_detail.verification_status, class: case fee_detail.verification_status
                                                                                  when FeeDetail::VERIFICATION_STATUS_VERIFIED
                                                                                    'ok' # green
                                                                                  when FeeDetail::VERIFICATION_STATUS_PROBLEMATIC
                                                                                    'error' # red
                                                                                  else
                                                                                    'warning' # orange
                                                                                  end).to_s %>
                  </span>
                </label>
              </div>
            <% end %>
          </div>
          
          <!-- 费用类型分组标签 -->
          <div class="fee-type-tags" id="fee-type-tags">
            <h4>已选费用类型</h4>
            <div class="fee-type-tags-container"></div>
          </div>
          
          <!-- 问题类型选择区域 -->
          <div class="problem-types-container" id="problem-types-container">
            <h4>选择问题类型（当处理意见为"无法通过"时，需选择问题类型或填写审核意见）</h4>
            <div class="problem-types-wrapper"></div>
          </div>
          
          <!-- 验证错误显示区域 -->
          <div id="validation-errors" class="validation-error" style="display:none;"></div>
        </div>
      <% else %>
        <%= f.inputs '费用明细' do %>
          <p>无法加载费用明细，未关联有效的报销单。</p>
        <% end %>
      <% end %>

      <%= f.inputs '处理与反馈' do %>
        <div class="input radio_buttons">
          <fieldset class="choices">
            <legend class="label">处理意见</legend>
            <ol class="choices-group">
              <li class="choice">
                <label for="communication_work_order_processing_opinion_可以通过">
                  <input type="radio" id="communication_work_order_processing_opinion_可以通过" name="communication_work_order[processing_opinion]" value="可以通过">
                  可以通过
                </label>
              </li>
              <li class="choice">
                <label for="communication_work_order_processing_opinion_无法通过">
                  <input type="radio" id="communication_work_order_processing_opinion_无法通过" name="communication_work_order[processing_opinion]" value="无法通过">
                  无法通过
                </label>
              </li>
            </ol>
          </fieldset>
        </div>
        
        <!-- 审核意见输入框 -->
        <%= f.input :audit_comment, label: "审核意见",
                input_html: { id: 'audit_comment_field' } %>
      <% end %>
    </div>
  </div>
  
  <div class="form-actions">
    <%= f.actions do %>
      <%= f.action :submit, as: :button, label: "提交", button_html: { class: "button" } %>
      <%= f.action :cancel, as: :link %>
    <% end %>
  </div>
<% end %>

<style>
  .tabs {
    margin-bottom: 20px;
  }
  
  .tab-content {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .fee-details-selection {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid #ddd;
    padding: 10px;
    margin: 10px 0;
  }
  
  .fee-detail-item {
    margin: 5px 0;
    padding: 5px;
    border-bottom: 1px solid #eee;
  }
  
  .fee-detail-item:last-child {
    border-bottom: none;
  }
  
  .fee-detail-item label {
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
  }
  
  .fee-detail-id {
    font-weight: bold;
    min-width: 50px;
  }
  
  .fee-detail-type {
    min-width: 100px;
  }
  
  .fee-detail-amount {
    min-width: 100px;
    text-align: right;
  }
  
  .fee-detail-date {
    min-width: 100px;
  }
  
  .fee-detail-status {
    min-width: 80px;
  }
  
  .checkbox-container {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 20px;
    margin-right: 5px;
  }
  
  /* 费用类型标签样式 */
  .fee-type-tags {
    margin-top: 20px;
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 4px;
  }
  
  .fee-type-tags h4 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 16px;
  }
  
  .fee-type-tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .fee-type-tag {
    background-color: #f0f0f0;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 5px 10px;
    font-size: 14px;
    display: inline-block;
  }
  
  /* 问题类型复选框样式 */
  .problem-types-container {
    margin-top: 20px;
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 4px;
  }
  
  .problem-types-container h4 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 16px;
  }
  
  .problem-types-wrapper {
    margin-top: 10px;
    max-height: 300px;
    overflow-y: auto;
  }
  
  /* 验证错误样式 */
  .validation-error {
    color: #721c24;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 10px;
    margin: 10px 0;
    border-radius: 4px;
  }
  
  .form-actions {
    margin-top: 20px;
  }
  
  .button {
    display: inline-block;
    padding: 8px 16px;
    background-color: #5cb85c;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-weight: bold;
  }
  
  .button:hover {
    background-color: #4cae4c;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM加载完成，初始化沟通工单表单...');
  
  // 启用详细调试
  const DEBUG = true;
  
  function debugLog(...args) {
    if (DEBUG) {
      console.log(...args);
    }
  }
  
  // 检查API端点配置
  checkApiEndpoints();
  
  // 获取DOM元素
  const feeDetailCheckboxes = document.querySelectorAll('.fee-detail-checkbox');
  const feeTypeTagsContainer = document.querySelector('.fee-type-tags-container');
  const feeTypeTags = document.getElementById('fee-type-tags');
  const problemTypesContainer = document.getElementById('problem-types-container');
  const problemTypesWrapper = document.querySelector('.problem-types-wrapper');
  const validationErrorsContainer = document.getElementById('validation-errors');
  const processingOpinionRadios = document.querySelectorAll('input[name="communication_work_order[processing_opinion]"]');
  const auditCommentField = document.getElementById('audit_comment_field');
  
  console.log('DOM元素获取状态:');
  console.log('- 费用明细复选框:', feeDetailCheckboxes.length);
  console.log('- 费用类型标签容器:', feeTypeTagsContainer ? '已找到' : '未找到');
  console.log('- 费用类型标签区域:', feeTypeTags ? '已找到' : '未找到');
  console.log('- 问题类型容器:', problemTypesContainer ? '已找到' : '未找到');
  console.log('- 问题类型包装器:', problemTypesWrapper ? '已找到' : '未找到');
  console.log('- 验证错误容器:', validationErrorsContainer ? '已找到' : '未找到');
  console.log('- 处理意见单选按钮:', processingOpinionRadios.length);
  console.log('- 审核意见字段:', auditCommentField ? '已找到' : '未找到');
  
  // 应用状态
  const appState = {
    // 数据
    allFeeTypes: [],
    allProblemTypes: [],
    
    // 用户选择
    selectedFeeDetails: [],
    uniqueFeeTypes: new Set(),
    processingOpinion: null,
    
    // 验证状态
    validationErrors: [],
    isFormValid: true
  };
  
  // 初始化应用
  initializeApp();
  
  // 主要初始化函数
  function initializeApp() {
    console.log('初始化应用...');
    
    // 添加事件监听器
    setupEventListeners();
    
    // 加载费用类型和问题类型数据
    Promise.all([loadFeeTypes(), loadProblemTypes()])
      .then(() => {
        console.log('数据加载完成，初始化UI状态');
        
        // 初始化UI状态
        updateSelectedFeeDetails();
        
        // 如果处理意见为"无法通过"，显示问题类型
        if (appState.processingOpinion === '无法通过') {
          showProblemTypes();
        } else {
          hideProblemTypes();
        }
      })
      .catch(error => {
        console.error('初始化应用时出错:', error);
        if (validationErrorsContainer) {
          validationErrorsContainer.innerHTML = `<p>初始化应用时出错: ${error.message}</p>`;
          validationErrorsContainer.style.display = 'block';
        }
      });
  }
  
  // 设置事件监听器
  function setupEventListeners() {
    // 费用明细复选框变化
    feeDetailCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', handleFeeDetailChange);
    });
    
    // 处理意见变化
    processingOpinionRadios.forEach(radio => {
      radio.addEventListener('change', handleProcessingOpinionChange);
      // 检查初始状态
      if (radio.checked) {
        appState.processingOpinion = radio.value;
        console.log('初始处理意见:', appState.processingOpinion);
      }
    });
    
    // 审核意见字段变化
    if (auditCommentField) {
      auditCommentField.addEventListener('input', function() {
        if (appState.validationErrors.length > 0) {
          validateFormState();
          renderValidationErrors();
        }
      });
    }
    
    // 表单提交验证
    const form = document.querySelector('form.formtastic');
    if (form) {
      form.addEventListener('submit', validateForm);
      console.log('已添加表单验证');
    } else {
      console.error('未找到表单元素');
    }
  }
  
  // 加载费用类型数据
  function loadFeeTypes() {
    console.log('加载费用类型数据...');
    
    return fetch('/admin/fee_types.json')
      .then(response => {
        console.log('费用类型API响应状态:', response.status);
        if (!response.ok) {
          throw new Error(`获取费用类型失败: ${response.status} ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('获取到费用类型数据:', data);
        appState.allFeeTypes = data;
      })
      .catch(error => {
        console.error('加载费用类型时出错:', error);
        throw error;
      });
  }
  
  // 加载问题类型数据
  function loadProblemTypes() {
    console.log('加载问题类型数据...');
    
    return fetch('/admin/problem_types.json')
      .then(response => {
        console.log('问题类型API响应状态:', response.status);
        if (!response.ok) {
          throw new Error(`获取问题类型失败: ${response.status} ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('获取到问题类型数据:', data);
        appState.allProblemTypes = data;
      })
      .catch(error => {
        console.error('加载问题类型时出错:', error);
        throw error;
      });
  }
  
  // 处理费用明细选择变化
  function handleFeeDetailChange() {
    console.log('费用明细选择变更');
    
    // 更新选中的费用明细
    updateSelectedFeeDetails();
    
    // 如果处理意见为"无法通过"，更新问题类型
    if (appState.processingOpinion === '无法通过') {
      showProblemTypes();
    }
    
    // 如果有验证错误，重新验证
    if (appState.validationErrors.length > 0) {
      validateFormState();
      renderValidationErrors();
    }
  }
  
  // 处理处理意见变化
  function handleProcessingOpinionChange(event) {
    const newOpinion = event.target.value;
    console.log('处理意见变更为:', newOpinion);
    
    // 更新状态
    appState.processingOpinion = newOpinion;
    
    // 根据处理意见显示/隐藏相应区域
    if (newOpinion === '无法通过') {
      showProblemTypes();
    } else {
      hideProblemTypes();
    }
    
    // 如果有验证错误，重新验证
    if (appState.validationErrors.length > 0) {
      validateFormState();
      renderValidationErrors();
    }
  }
  
  // 更新选中的费用明细
  function updateSelectedFeeDetails() {
    console.log('更新选中的费用明细...');
    
    // 重置状态
    appState.selectedFeeDetails = [];
    appState.uniqueFeeTypes = new Set();
    
    // 获取所有选中的费用明细
    feeDetailCheckboxes.forEach(checkbox => {
      if (checkbox.checked) {
        const feeDetailId = checkbox.value;
        const feeType = checkbox.dataset.feeType || '';
        
        console.log(`选中的费用明细 #${feeDetailId}, 费用类型: "${feeType}"`);
        
        // 添加到选中的费用明细
        appState.selectedFeeDetails.push({
          id: feeDetailId,
          feeType: feeType
        });
        
        // 添加到唯一费用类型集合
        if (feeType && feeType.trim() !== '') {
          appState.uniqueFeeTypes.add(feeType);
        }
      }
    });
    
    console.log('选中的费用明细数量:', appState.selectedFeeDetails.length);
    console.log('唯一费用类型:', Array.from(appState.uniqueFeeTypes));
    
    // 更新费用类型标签
    renderFeeTypeTags();
  }
  
  // 渲染费用类型标签
  function renderFeeTypeTags() {
    console.log('渲染费用类型标签...');
    
    if (!feeTypeTagsContainer || !feeTypeTags) {
      console.error('费用类型标签容器或区域未找到');
      return;
    }
    
    // 清空容器
    feeTypeTagsContainer.innerHTML = '';
    
    // 检查是否有选择的费用明细
    const uniqueFeeTypesArray = Array.from(appState.uniqueFeeTypes);
    
    if (uniqueFeeTypesArray.length === 0) {
      // 没有选择费用明细，显示提示信息
      feeTypeTagsContainer.innerHTML = '<p>未选择费用明细</p>';
      feeTypeTags.style.display = 'none';
      return;
    }
    
    // 有选择的费用明细，显示费用类型标签
    uniqueFeeTypesArray.forEach(feeType => {
      const tagDiv = document.createElement('div');
      tagDiv.className = 'fee-type-tag';
      tagDiv.dataset.feeType = feeType;
      
      // 计算该费用类型下的费用明细数量
      const count = appState.selectedFeeDetails.filter(detail => detail.feeType === feeType).length;
      
      tagDiv.textContent = `${feeType} (${count}项)`;
      feeTypeTagsContainer.appendChild(tagDiv);
    });
    
    // 确保费用类型标签区域显示
    feeTypeTags.style.display = 'block';
  }
  
  // 显示问题类型
  function showProblemTypes() {
    console.log('显示问题类型...');
    
    if (!problemTypesContainer || !problemTypesWrapper) {
      console.error('问题类型容器或包装器未找到');
      return;
    }
    
    // 确保问题类型区域显示
    problemTypesContainer.style.display = 'block';
    
    // 清空问题类型容器
    problemTypesWrapper.innerHTML = '';
    
    // 如果没有选择费用明细，显示提示信息
    if (appState.selectedFeeDetails.length === 0) {
      problemTypesWrapper.innerHTML = '<p>请先选择费用明细，以加载相关的问题类型</p>';
      return;
    }
    
    // 获取选中费用类型对应的问题类型
    const relevantProblemTypes = getRelevantProblemTypes();
    
    // 如果没有找到相关问题类型，显示提示信息
    if (relevantProblemTypes.length === 0) {
      problemTypesWrapper.innerHTML = '<p>未找到与已选费用类型相关的问题类型</p>';
      return;
    }
    
    // 创建问题类型复选框
    renderProblemTypeCheckboxes(relevantProblemTypes);
  }
  
  // 隐藏问题类型
  function hideProblemTypes() {
    console.log('隐藏问题类型...');
    
    if (problemTypesContainer) {
      problemTypesContainer.style.display = 'none';
    }
  }
  
  // 获取与选中费用类型相关的问题类型
  function getRelevantProblemTypes() {
    console.log('获取相关问题类型...');
    
    // 如果没有选择费用明细，返回空数组
    if (appState.selectedFeeDetails.length === 0) {
      return [];
    }
    
    // 获取选中费用类型对应的FeeType记录
    const selectedFeeTypeNames = Array.from(appState.uniqueFeeTypes);
    const matchedFeeTypes = [];
    const unmatchedFeeTypes = [];
    
    // 严格匹配费用类型
    selectedFeeTypeNames.forEach(feeTypeName => {
      // 只进行精确匹配
      const exactMatch = appState.allFeeTypes.find(ft =>
        ft.title === feeTypeName ||
        ft.code === feeTypeName ||
        ft.display_name === feeTypeName
      );
      
      if (exactMatch) {
        matchedFeeTypes.push(exactMatch);
      } else {
        // 如果没有找到匹配，记录未匹配的费用类型
        unmatchedFeeTypes.push(feeTypeName);
      }
    });
    
    console.log('匹配到的费用类型:', matchedFeeTypes);
    console.log('未匹配到的费用类型:', unmatchedFeeTypes);
    
    // 如果有未匹配的费用类型，显示提示
    if (unmatchedFeeTypes.length > 0) {
      // 在费用类型标签区域显示提示
      const feeTypeTagsContainer = document.querySelector('.fee-type-tags-container');
      if (feeTypeTagsContainer) {
        const warningDiv = document.createElement('div');
        warningDiv.className = 'unmatched-fee-types-warning';
        warningDiv.style.marginTop = '10px';
        warningDiv.style.padding = '10px';
        warningDiv.style.backgroundColor = '#fff3cd';
        warningDiv.style.border = '1px solid #ffeeba';
        warningDiv.style.borderRadius = '4px';
        warningDiv.style.color = '#856404';
        
        warningDiv.innerHTML = `
          <p><strong>提示：</strong>以下费用类型在系统中不存在，建议创建：</p>
          <ul>${unmatchedFeeTypes.map(ft => `<li>${ft}</li>`).join('')}</ul>
          <p><a href="/admin/fee_types/new" target="_blank" class="button" style="display:inline-block; padding:5px 10px; background-color:#007bff; color:white; text-decoration:none; border-radius:3px;">创建费用类型</a></p>
        `;
        
        // 检查是否已经存在警告，如果存在则替换，否则添加
        const existingWarning = feeTypeTagsContainer.querySelector('.unmatched-fee-types-warning');
        if (existingWarning) {
          feeTypeTagsContainer.replaceChild(warningDiv, existingWarning);
        } else {
          feeTypeTagsContainer.appendChild(warningDiv);
        }
      }
    }
    
    // 获取这些费用类型对应的问题类型
    const relevantProblemTypes = [];
    const matchedFeeTypeIds = matchedFeeTypes.map(ft => ft.id);
    
    // 使用Set来防止重复的问题类型
    const problemTypeSet = new Set();
    
    appState.allProblemTypes.forEach(problemType => {
      // 如果问题类型关联的费用类型在匹配列表中，则包含
      if (problemType.fee_type_id && matchedFeeTypeIds.includes(problemType.fee_type_id)) {
        // 使用问题类型ID作为唯一标识，防止重复
        const problemTypeKey = problemType.id.toString();
        if (!problemTypeSet.has(problemTypeKey)) {
          problemTypeSet.add(problemTypeKey);
          relevantProblemTypes.push(problemType);
        }
      }
    });
    
    console.log('相关问题类型数量:', relevantProblemTypes.length);
    
    // 如果没有找到相关问题类型，显示提示信息
    if (relevantProblemTypes.length === 0) {
      console.log('未找到相关问题类型');
      return [];
    }
    
    return relevantProblemTypes;
  }
  
  // 渲染问题类型复选框
  function renderProblemTypeCheckboxes(problemTypes) {
    console.log('渲染问题类型复选框...');
    
    // 创建一个分组容器
    const sectionDiv = document.createElement('div');
    sectionDiv.className = 'problem-type-section';
    
    // 创建费用类型标题
    const feeTypeTitle = document.createElement('h5');
    feeTypeTitle.textContent = `已选费用类型: ${Array.from(appState.uniqueFeeTypes).join(', ')}`;
    sectionDiv.appendChild(feeTypeTitle);
    
    // 创建问题类型复选框容器
    const checkboxContainer = document.createElement('div');
    checkboxContainer.className = 'problem-type-checkboxes';
    
    // 创建问题类型复选框
    problemTypes.forEach(problemType => {
      const checkboxDiv = document.createElement('div');
      checkboxDiv.className = 'problem-type-checkbox';
      
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = `problem_type_${problemType.id}`;
      checkbox.name = 'communication_work_order[problem_type_ids][]';
      checkbox.value = problemType.id;
      
      // 添加事件监听器，当选择问题类型时重新验证
      checkbox.addEventListener('change', function() {
        if (appState.validationErrors.length > 0) {
          validateFormState();
          renderValidationErrors();
        }
      });
      
      const label = document.createElement('label');
      label.htmlFor = `problem_type_${problemType.id}`;
      
      // 构建显示名称
      if (problemType.display_name) {
        label.textContent = problemType.display_name;
      } else if (problemType.code && problemType.title) {
        label.textContent = `${problemType.code} - ${problemType.title}`;
      } else {
        label.textContent = problemType.title || `问题类型 #${problemType.id}`;
      }
      
      checkboxDiv.appendChild(checkbox);
      checkboxDiv.appendChild(label);
      checkboxContainer.appendChild(checkboxDiv);
    });
    
    sectionDiv.appendChild(checkboxContainer);
    problemTypesWrapper.appendChild(sectionDiv);
  }
  
  // 表单验证
  function validateForm(event) {
    console.log('验证表单...');
    
    // 验证表单状态
    const isValid = validateFormState();
    
    // 如果验证失败，阻止表单提交
    if (!isValid) {
      event.preventDefault();
      renderValidationErrors();
      return false;
    }
    
    return true;
  }
  
  // 验证表单状态
  function validateFormState() {
    console.log('验证表单状态...');
    
    // 重置验证状态
    appState.validationErrors = [];
    appState.isFormValid = true;
    
    // 检查是否选择了费用明细
    if (appState.selectedFeeDetails.length === 0) {
      appState.validationErrors.push('请至少选择一个费用明细');
      appState.isFormValid = false;
    }
    
    // 检查处理意见
    if (!appState.processingOpinion) {
      appState.validationErrors.push('请选择处理意见');
      appState.isFormValid = false;
    }
    
    // 如果处理意见为"无法通过"，检查是否选择了问题类型或填写了审核意见
    if (appState.processingOpinion === '无法通过') {
      const problemTypeCheckboxes = document.querySelectorAll('input[name="communication_work_order[problem_type_ids][]"]:checked');
      const auditComment = auditCommentField ? auditCommentField.value.trim() : '';
      
      if (problemTypeCheckboxes.length === 0 && auditComment === '') {
        appState.validationErrors.push('当处理意见为"无法通过"时，需选择问题类型或填写审核意见');
        appState.isFormValid = false;
      }
    }
    
    return appState.isFormValid;
  }
  
  // 渲染验证错误
  function renderValidationErrors() {
    console.log('渲染验证错误...');
    
    if (!validationErrorsContainer) {
      console.error('验证错误容器未找到');
      return;
    }
    
    // 清空容器
    validationErrorsContainer.innerHTML = '';
    
    // 如果没有错误，隐藏容器
    if (appState.validationErrors.length === 0) {
      validationErrorsContainer.style.display = 'none';
      return;
    }
    
    // 显示容器
    validationErrorsContainer.style.display = 'block';
    
    // 创建错误列表
    const errorList = document.createElement('ul');
    
    // 添加错误项
    appState.validationErrors.forEach(error => {
      const errorItem = document.createElement('li');
      errorItem.textContent = error;
      errorList.appendChild(errorItem);
    });
    
    // 添加到容器
    validationErrorsContainer.appendChild(errorList);
  }