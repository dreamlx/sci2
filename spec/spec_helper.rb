require 'simplecov'

# SimpleCov configuration with migration monitoring and performance optimization
SimpleCov.start 'rails' do
  # Performance settings
  enable_for_bundler true
  project_name 'SCI2 Test Coverage'

  # Minimum coverage thresholds
  minimum_coverage 85
  minimum_coverage_by_file 70

  # Coverage criteria
  coverage_criterion :test_types
  branch_coverage true

  # Performance groups - critical paths first
  add_group 'Core Services', 'app/services/core'
  add_group 'Business Logic', ['app/services', 'app/commands']
  add_group 'Data Layer', ['app/repositories', 'app/models']
  add_group 'Authorization', 'app/policies'
  add_group 'Controllers', 'app/controllers'
  add_group 'Helpers', 'app/helpers'
  add_group 'Libraries', 'app/lib'

  # Migration monitoring groups
  add_group 'New Architecture' do |file|
    file.filename.include?('app/services/') ||
    file.filename.include?('app/commands/') ||
    file.filename.include?('app/policies/') ||
    file.filename.include?('app/repositories/')
  end

  add_group 'Legacy Controllers' do |file|
    file.filename.include?('app/controllers/') &&
    !file.filename.include?('app/controllers/concerns/')
  end

  add_group 'Legacy Models' do |file|
    file.filename.include?('app/models/') &&
    !file.filename.match?(/concern|policy|repository/)
  end

  # Test coverage groups
  add_group 'New Architecture Tests' do |file|
    file.filename.include?('spec/services/') ||
    file.filename.include?('spec/commands/') ||
    file.filename.include?('spec/policies/') ||
    file.filename.include?('spec/repositories/')
  end

  add_group 'Legacy Tests' do |file|
    file.filename.include?('spec/controllers/') ||
    file.filename.include?('spec/models/') ||
    file.filename.include?('spec/features/') ||
    file.filename.include?('spec/system/') ||
    file.filename.include?('spec/requests/')
  end

  add_group 'Migration Target' do |file|
    file.filename.include?('spec/controllers/') ||
    file.filename.include?('spec/models/') ||
    file.filename.include?('spec/features/')
  end

  # Performance-focused filters
  add_filter '/spec/'
  add_filter '/config/'
  add_filter '/vendor/'
  add_filter '/db/'
  add_filter 'test_migration/'
  add_filter '/bin/'
  add_filter '/public/'
  add_filter '/tmp/'

  # Filter out files that shouldn't be covered
  add_filter do |source_file|
    source_file.filename.include?('_spec.rb') ||
    source_file.filename.include?('.rake') ||
    source_file.filename.include?('version.rb') ||
    source_file.lines.count < 5
  end

  # Track files with performance consideration
  track_files '{app,lib}/**/*.rb'

  # Formatters for detailed reporting
  if ENV['CI']
    add_group 'CI Environment' do |file|
      # CI-specific grouping
      true
    end
  end
end

# Performance monitoring for test suite
SimpleCov.at_exit do
  # Generate performance metrics
  coverage_result = SimpleCov.result

  # Log performance summary
  puts "\n=== Coverage Performance Summary ==="
  puts "Total Files: #{coverage_result.files.count}"
  puts "Total Lines: #{coverage_result.total_lines}"
  puts "Covered Lines: #{coverage_result.covered_lines}"
  puts "Coverage Percentage: #{coverage_result.covered_percent.round(2)}%"

  # Show slowest files (those with lowest coverage)
  slow_files = coverage_result.files.sort_by(&:covered_percent).first(5)
  puts "\n=== Files Needing Attention ==="
  slow_files.each do |file|
    puts "#{file.filename}: #{file.covered_percent.round(2)}% (#{file.covered_lines}/#{file.lines_of_code} lines)"
  end

  # Performance warning for low coverage files
  if coverage_result.covered_percent < 85
    puts "\n⚠️  WARNING: Coverage below 85% threshold"
    puts "Consider adding tests for uncovered business logic"
  end

  # Call original at_exit behavior
  SimpleCov.result.format!
end

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
